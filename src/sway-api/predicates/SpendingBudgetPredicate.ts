/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.6
  Forc version: 0.63.5
  Fuel-Core version: 0.35.0
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;

export type SpendingBudgetPredicateConfigurables = Partial<{
    RECEIVER: AddressInput;
    AMOUNT: BigNumberish;
    START_TIME: BigNumberish;
    TIME_PERIOD: BigNumberish;
}>;

export type SpendingBudgetPredicateInputs = [receiver: AddressInput, amount: BigNumberish, current_time: BigNumberish];

export type SpendingBudgetPredicateParameters = Omit<
  PredicateParams<SpendingBudgetPredicateInputs, SpendingBudgetPredicateConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "predicate",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "struct std::address::Address",
      "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308",
      "metadataTypeId": 1
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "b256",
      "metadataTypeId": 0
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "receiver",
          "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
        },
        {
          "name": "amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "current_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "RECEIVER",
      "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308",
      "offset": 1320
    },
    {
      "name": "AMOUNT",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 1312
    },
    {
      "name": "START_TIME",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 1352
    },
    {
      "name": "TIME_PERIOD",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 1360
    }
  ]
};

const bytecode = decompressBytecode('H4sIAAAAAAAAA51Uz2sTURCepInZitDFpCovBx8YYQ9VFmrE4wubELdpyJMiBDQmPQg9eNCgEjzt0aMK/jhWD+JxAxG8uUeP/RNS0INooAcLKT3E7738ZJNeurC8ycx8M9/7ZjbswKanRFHST5zXBkHEHAzoNdEt+eeA5E8yZFcQ769T9bgblcfdGPJfIGYgxhEzQrHviFkjnBWKPULMHsXsUOwh+yvRN9J6Imip3qO1muOvbReiJEt+44Frkiz6jfsFk5J4n+cpOf7dvE3RZCHlwRe5iVts56IbwF+XTvsxcqqIG1Yh5qHOl6aA7aZIOr7fzMPOZQR6LwNzDphrwOwAwycYlafsXMqD/9uMP5j629MeTruKvB32m4j9MsO6fWbFPcWXW72Up3JC8XsqvsB/lzl7SgeruQlsqRPUe+Yy+J4Fjx+4h63ugb591LZHPCxtgx90vFIr+hngX8oKciRquFn04eAInvtzPD+pfhlB9Jbo8jsDOXo2xJmzS6z4iljJI1bpktzyjfFd2f7cnlxUdbTOvZgAV1PbTkfbC+6ZVvm41xLil3SuGxPsH9Eb1fvIpg/g8h6cNvqaW2KGmzHkBl6lrqpBetbFDrFDU+ENdsTH+MQIvzKP71LNJbwcNbi2obmR3kwFppsJ6jn4HB81NSfUNMc1V0Y1Z/VqLdDLOkmvZ0TrIb3kjF4S87VP2CtT70fRN/RsC3G131Vt51aHdl7NfKJla4GWs7yDKW/oUYYGqlYvS9ifXW1Xvk78ablKZjlL9Zytegm9o04nQG5D55Y1H2/IR9fgYz9mBL43xjMKZma0iJcI61mTIs7dq+o8c354UhrnhTv4P5AUSY5OaJSQeWEMvz39/apvHHxS3setDmeHQvUXYV1O+/wHdY4cqVgFAAA=');

export class SpendingBudgetPredicate extends Predicate<
  SpendingBudgetPredicateInputs,
  SpendingBudgetPredicateConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: SpendingBudgetPredicateParameters) {
    super({ abi, bytecode, ...params });
  }
}
